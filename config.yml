title: Create REST server with NodeJS and Express
tagline: Learn the basics to create an Express server and follow the REST principles.
description: Learn the basics to create an Express server and follow the REST principles.

tags:
  - NodeJS
  - JavaScript
  - Express
  - Server

template:
  name: hyf-homework-nodejs-3
  repo: hyf-homework-express

before:

- type: updateBranchProtection
  required_status_checks:
    strict: true
    contexts:
      - 'Travis CI - Branch'

  # open issue 1 (welcome)
- type: createIssue
  title: Welcome
  body: 00-intro.md
  data:
    prUrl: '%payload.repository.html_url%/compare/master...step-1?expand=1'


steps:
  # 1 - Enable CI
- title: Create the first endpoint
  description: Enable continuous integration and make the first endpoint.
  link: '{{ repoUrl }}/issues/1'
  event: check_run
  actions:
  # waits for ci to report a status, any status
  - type: gate
    left: '%payload.check_run.app.name%'
    operator: ===
    right: Travis CI

  - type: gate
    left: '%payload.check_run.pull_requests.length%'
    operator: '>'
    right: 0

  - type: respond
    issue: '%payload.check_run.pull_requests.0.number%'
    with: 00_01-build-status.md

- title: Create a Server and fix the build
  description: Create a Server that would respond with Hello World!
  link: '{{ repoUrl }}/pull/2'
  event: check_run.completed
  actions:

  # The build pass and we create the next issue
  - type: gate
    left: '%payload.check_run.conclusion%'
    operator: ===
    right: success

  # approve PullRequest
  - type: createReview
    body: 01_01-build-pass.md
    pullRequest: 2
    event: APPROVE

- title: Merge Pull Request
  description: Merge PullRequest "Hello World!"
  link: '{{ repoUrl }}/pull/2'
  event: pull_request.closed
  actions:

  # The build pass and we create the next issue
  - type: gate
    left: '%payload.pull_request.number%'
    operator: ==
    right: 2

  # update step-2
  - type: mergeBranch
    head: master
    base: step-2

  # close initial issue
  - type: closeIssue
    issue: Welcome

  # open pr #3
  - type: createPullRequest
    title: Create REST /users
    body: 02_01-pull-request.md
    head: step-2
    action_id: newPRUserEndpoint

  # open issue #4
  - type: createIssue
    title: First REST method
    body: 02-intro.md
    action_id: linkGetUserEndpointIssue
    data:
      prUrl: '%actions.newPRUserEndpoint.data.html_url%'

  - type: respond
    with: 01_02-merged.md
    data:
      getUsersEndpointIssue: '%actions.linkGetUserEndpointIssue.data.html_url%'

# Make the /users endpoint
- title: First step in the business logic, GET /users
  description: Deliver your first REST endpoint!
  link: '{{ repoUrl }}/pull/3'
  event: check_run.completed
  actions:

  # The build pass and we create the next issue
  - type: gate
    left: '%payload.check_run.conclusion%'
    operator: ===
    right: success

  # The build pass and we create the next issue
  - type: gate
    left: '%payload.check_run.pull_requests.0.number%'
    operator: ==
    right: 3
